// using dynamic programming (top-dowm)
#include <bits/stdc++.h>
using namespace std;

// maximum profit is returned
int MaxReturn(int W, int wt[], int val[], int index, int** dpp)
{
    // base condition
    if (index < 0)
        return 0;
    if (dpp[index][W] != -1)
        return dpp[index][W];

    if (wt[index] > W) {

        // Storing function call value
        // stack in table before return
        dpp[index][W] = MaxReturn(W, wt, val, index - 1, dpp);
        return dpp[index][W];
    }
    else {
        // Store value in a table before return
        dpp[index][W] = max(val[index]
                           + MaxReturn(W - wt[index], wt, val,
                                         index - 1, dpp),
                       MaxReturn(W, wt, val, index - 1, dpp));

        // Return value of table after storing
        return dpp[index][W];
    }
}

int knap_Sack(int W, int wt[], int val[], int n)
{
    // double pointer to declare the
    // table dynamically
    int** dpp;
    dpp = new int*[n];

    // loop to create the table dynamically
    for (int i = 0; i < n; i++)
        dpp[i] = new int[W + 1];

    // loop to initially filled the
    // table with -1
    for (int i = 0; i < n; i++)
        for (int j = 0; j < W + 1; j++)
            dpp[i][j] = -1;
    return MaxReturn(W, wt, val, n - 1, dpp);
}

// Driver Code
int main()
{
    int profit[] = { 60, 100, 120 };
    int weight[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(profit) / sizeof(profit[0]);
    cout << knap_Sack(W, weight, profit, n);
    return 0;
}
